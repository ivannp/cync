// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: FileHeader.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CloudSync.Core {

  /// <summary>Holder for reflection information generated from FileHeader.proto</summary>
  public static partial class FileHeaderReflection {

    #region Descriptor
    /// <summary>File descriptor for FileHeader.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FileHeaderReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBGaWxlSGVhZGVyLnByb3RvEgdzb3Rjb3JlIpwBCgpGaWxlSGVhZGVyEjIK",
            "EGNvbXByZXNzaW9uX3R5cGUYASABKA4yGC5zb3Rjb3JlLkNvbXByZXNzaW9u",
            "VHlwZRIZChFjb21wcmVzc2lvbl9sZXZlbBgCIAEoBRIgCgdjaXBoZXJzGAMg",
            "AygOMg8uc290Y29yZS5DaXBoZXISCwoDaXZzGAQgAygMEhAKCGNoZWNrc3Vt",
            "GAUgASgMKhsKD0NvbXByZXNzaW9uVHlwZRIICgRaTElCEAAqOgoGQ2lwaGVy",
            "Eg0KCVVOREVGSU5FRBAAEgcKA0FFUxABEgsKB1RXT0ZJU0gQAhILCgdTRVJQ",
            "RU5UEANCEaoCDkNsb3VkU3luYy5Db3JlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::CloudSync.Core.CompressionType), typeof(global::CloudSync.Core.Cipher), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CloudSync.Core.FileHeader), global::CloudSync.Core.FileHeader.Parser, new[]{ "CompressionType", "CompressionLevel", "Ciphers", "Ivs", "Checksum" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CompressionType {
    [pbr::OriginalName("ZLIB")] Zlib = 0,
  }

  public enum Cipher {
    [pbr::OriginalName("UNDEFINED")] Undefined = 0,
    [pbr::OriginalName("AES")] Aes = 1,
    [pbr::OriginalName("TWOFISH")] Twofish = 2,
    [pbr::OriginalName("SERPENT")] Serpent = 3,
  }

  #endregion

  #region Messages
  public sealed partial class FileHeader : pb::IMessage<FileHeader> {
    private static readonly pb::MessageParser<FileHeader> _parser = new pb::MessageParser<FileHeader>(() => new FileHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CloudSync.Core.FileHeaderReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileHeader(FileHeader other) : this() {
      compressionType_ = other.compressionType_;
      compressionLevel_ = other.compressionLevel_;
      ciphers_ = other.ciphers_.Clone();
      ivs_ = other.ivs_.Clone();
      checksum_ = other.checksum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileHeader Clone() {
      return new FileHeader(this);
    }

    /// <summary>Field number for the "compression_type" field.</summary>
    public const int CompressionTypeFieldNumber = 1;
    private global::CloudSync.Core.CompressionType compressionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CloudSync.Core.CompressionType CompressionType {
      get { return compressionType_; }
      set {
        compressionType_ = value;
      }
    }

    /// <summary>Field number for the "compression_level" field.</summary>
    public const int CompressionLevelFieldNumber = 2;
    private int compressionLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompressionLevel {
      get { return compressionLevel_; }
      set {
        compressionLevel_ = value;
      }
    }

    /// <summary>Field number for the "ciphers" field.</summary>
    public const int CiphersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::CloudSync.Core.Cipher> _repeated_ciphers_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::CloudSync.Core.Cipher) x);
    private readonly pbc::RepeatedField<global::CloudSync.Core.Cipher> ciphers_ = new pbc::RepeatedField<global::CloudSync.Core.Cipher>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CloudSync.Core.Cipher> Ciphers {
      get { return ciphers_; }
    }

    /// <summary>Field number for the "ivs" field.</summary>
    public const int IvsFieldNumber = 4;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_ivs_codec
        = pb::FieldCodec.ForBytes(34);
    private readonly pbc::RepeatedField<pb::ByteString> ivs_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Ivs {
      get { return ivs_; }
    }

    /// <summary>Field number for the "checksum" field.</summary>
    public const int ChecksumFieldNumber = 5;
    private pb::ByteString checksum_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Checksum {
      get { return checksum_; }
      set {
        checksum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompressionType != other.CompressionType) return false;
      if (CompressionLevel != other.CompressionLevel) return false;
      if(!ciphers_.Equals(other.ciphers_)) return false;
      if(!ivs_.Equals(other.ivs_)) return false;
      if (Checksum != other.Checksum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CompressionType != 0) hash ^= CompressionType.GetHashCode();
      if (CompressionLevel != 0) hash ^= CompressionLevel.GetHashCode();
      hash ^= ciphers_.GetHashCode();
      hash ^= ivs_.GetHashCode();
      if (Checksum.Length != 0) hash ^= Checksum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CompressionType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CompressionType);
      }
      if (CompressionLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CompressionLevel);
      }
      ciphers_.WriteTo(output, _repeated_ciphers_codec);
      ivs_.WriteTo(output, _repeated_ivs_codec);
      if (Checksum.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Checksum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompressionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CompressionType);
      }
      if (CompressionLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompressionLevel);
      }
      size += ciphers_.CalculateSize(_repeated_ciphers_codec);
      size += ivs_.CalculateSize(_repeated_ivs_codec);
      if (Checksum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Checksum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileHeader other) {
      if (other == null) {
        return;
      }
      if (other.CompressionType != 0) {
        CompressionType = other.CompressionType;
      }
      if (other.CompressionLevel != 0) {
        CompressionLevel = other.CompressionLevel;
      }
      ciphers_.Add(other.ciphers_);
      ivs_.Add(other.ivs_);
      if (other.Checksum.Length != 0) {
        Checksum = other.Checksum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            compressionType_ = (global::CloudSync.Core.CompressionType) input.ReadEnum();
            break;
          }
          case 16: {
            CompressionLevel = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            ciphers_.AddEntriesFrom(input, _repeated_ciphers_codec);
            break;
          }
          case 34: {
            ivs_.AddEntriesFrom(input, _repeated_ivs_codec);
            break;
          }
          case 42: {
            Checksum = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
