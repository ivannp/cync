// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileHeader.proto

#ifndef PROTOBUF_FileHeader_2eproto__INCLUDED
#define PROTOBUF_FileHeader_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_FileHeader_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFileHeaderImpl();
void InitDefaultsFileHeader();
inline void InitDefaults() {
  InitDefaultsFileHeader();
}
}  // namespace protobuf_FileHeader_2eproto
namespace sotcore {
class FileHeader;
class FileHeaderDefaultTypeInternal;
extern FileHeaderDefaultTypeInternal _FileHeader_default_instance_;
}  // namespace sotcore
namespace sotcore {

enum CompressionType {
  ZLIB = 0,
  CompressionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CompressionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CompressionType_IsValid(int value);
const CompressionType CompressionType_MIN = ZLIB;
const CompressionType CompressionType_MAX = ZLIB;
const int CompressionType_ARRAYSIZE = CompressionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CompressionType_descriptor();
inline const ::std::string& CompressionType_Name(CompressionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CompressionType_descriptor(), value);
}
inline bool CompressionType_Parse(
    const ::std::string& name, CompressionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompressionType>(
    CompressionType_descriptor(), name, value);
}
enum Cipher {
  UNDEFINED = 0,
  AES = 1,
  TWOFISH = 2,
  SERPENT = 3,
  Cipher_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Cipher_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Cipher_IsValid(int value);
const Cipher Cipher_MIN = UNDEFINED;
const Cipher Cipher_MAX = SERPENT;
const int Cipher_ARRAYSIZE = Cipher_MAX + 1;

const ::google::protobuf::EnumDescriptor* Cipher_descriptor();
inline const ::std::string& Cipher_Name(Cipher value) {
  return ::google::protobuf::internal::NameOfEnum(
    Cipher_descriptor(), value);
}
inline bool Cipher_Parse(
    const ::std::string& name, Cipher* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Cipher>(
    Cipher_descriptor(), name, value);
}
// ===================================================================

class FileHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sotcore.FileHeader) */ {
 public:
  FileHeader();
  virtual ~FileHeader();

  FileHeader(const FileHeader& from);

  inline FileHeader& operator=(const FileHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileHeader(FileHeader&& from) noexcept
    : FileHeader() {
    *this = ::std::move(from);
  }

  inline FileHeader& operator=(FileHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileHeader* internal_default_instance() {
    return reinterpret_cast<const FileHeader*>(
               &_FileHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FileHeader* other);
  friend void swap(FileHeader& a, FileHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  FileHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FileHeader& from);
  void MergeFrom(const FileHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FileHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sotcore.Cipher ciphers = 3;
  int ciphers_size() const;
  void clear_ciphers();
  static const int kCiphersFieldNumber = 3;
  ::sotcore::Cipher ciphers(int index) const;
  void set_ciphers(int index, ::sotcore::Cipher value);
  void add_ciphers(::sotcore::Cipher value);
  const ::google::protobuf::RepeatedField<int>& ciphers() const;
  ::google::protobuf::RepeatedField<int>* mutable_ciphers();

  // repeated bytes ivs = 4;
  int ivs_size() const;
  void clear_ivs();
  static const int kIvsFieldNumber = 4;
  const ::std::string& ivs(int index) const;
  ::std::string* mutable_ivs(int index);
  void set_ivs(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ivs(int index, ::std::string&& value);
  #endif
  void set_ivs(int index, const char* value);
  void set_ivs(int index, const void* value, size_t size);
  ::std::string* add_ivs();
  void add_ivs(const ::std::string& value);
  #if LANG_CXX11
  void add_ivs(::std::string&& value);
  #endif
  void add_ivs(const char* value);
  void add_ivs(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ivs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ivs();

  // bytes checksum = 5;
  void clear_checksum();
  static const int kChecksumFieldNumber = 5;
  const ::std::string& checksum() const;
  void set_checksum(const ::std::string& value);
  #if LANG_CXX11
  void set_checksum(::std::string&& value);
  #endif
  void set_checksum(const char* value);
  void set_checksum(const void* value, size_t size);
  ::std::string* mutable_checksum();
  ::std::string* release_checksum();
  void set_allocated_checksum(::std::string* checksum);

  // .sotcore.CompressionType compression_type = 1;
  void clear_compression_type();
  static const int kCompressionTypeFieldNumber = 1;
  ::sotcore::CompressionType compression_type() const;
  void set_compression_type(::sotcore::CompressionType value);

  // int32 compression_level = 2;
  void clear_compression_level();
  static const int kCompressionLevelFieldNumber = 2;
  ::google::protobuf::int32 compression_level() const;
  void set_compression_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sotcore.FileHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> ciphers_;
  mutable int _ciphers_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ivs_;
  ::google::protobuf::internal::ArenaStringPtr checksum_;
  int compression_type_;
  ::google::protobuf::int32 compression_level_;
  mutable int _cached_size_;
  friend struct ::protobuf_FileHeader_2eproto::TableStruct;
  friend void ::protobuf_FileHeader_2eproto::InitDefaultsFileHeaderImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileHeader

// .sotcore.CompressionType compression_type = 1;
inline void FileHeader::clear_compression_type() {
  compression_type_ = 0;
}
inline ::sotcore::CompressionType FileHeader::compression_type() const {
  // @@protoc_insertion_point(field_get:sotcore.FileHeader.compression_type)
  return static_cast< ::sotcore::CompressionType >(compression_type_);
}
inline void FileHeader::set_compression_type(::sotcore::CompressionType value) {
  
  compression_type_ = value;
  // @@protoc_insertion_point(field_set:sotcore.FileHeader.compression_type)
}

// int32 compression_level = 2;
inline void FileHeader::clear_compression_level() {
  compression_level_ = 0;
}
inline ::google::protobuf::int32 FileHeader::compression_level() const {
  // @@protoc_insertion_point(field_get:sotcore.FileHeader.compression_level)
  return compression_level_;
}
inline void FileHeader::set_compression_level(::google::protobuf::int32 value) {
  
  compression_level_ = value;
  // @@protoc_insertion_point(field_set:sotcore.FileHeader.compression_level)
}

// repeated .sotcore.Cipher ciphers = 3;
inline int FileHeader::ciphers_size() const {
  return ciphers_.size();
}
inline void FileHeader::clear_ciphers() {
  ciphers_.Clear();
}
inline ::sotcore::Cipher FileHeader::ciphers(int index) const {
  // @@protoc_insertion_point(field_get:sotcore.FileHeader.ciphers)
  return static_cast< ::sotcore::Cipher >(ciphers_.Get(index));
}
inline void FileHeader::set_ciphers(int index, ::sotcore::Cipher value) {
  ciphers_.Set(index, value);
  // @@protoc_insertion_point(field_set:sotcore.FileHeader.ciphers)
}
inline void FileHeader::add_ciphers(::sotcore::Cipher value) {
  ciphers_.Add(value);
  // @@protoc_insertion_point(field_add:sotcore.FileHeader.ciphers)
}
inline const ::google::protobuf::RepeatedField<int>&
FileHeader::ciphers() const {
  // @@protoc_insertion_point(field_list:sotcore.FileHeader.ciphers)
  return ciphers_;
}
inline ::google::protobuf::RepeatedField<int>*
FileHeader::mutable_ciphers() {
  // @@protoc_insertion_point(field_mutable_list:sotcore.FileHeader.ciphers)
  return &ciphers_;
}

// repeated bytes ivs = 4;
inline int FileHeader::ivs_size() const {
  return ivs_.size();
}
inline void FileHeader::clear_ivs() {
  ivs_.Clear();
}
inline const ::std::string& FileHeader::ivs(int index) const {
  // @@protoc_insertion_point(field_get:sotcore.FileHeader.ivs)
  return ivs_.Get(index);
}
inline ::std::string* FileHeader::mutable_ivs(int index) {
  // @@protoc_insertion_point(field_mutable:sotcore.FileHeader.ivs)
  return ivs_.Mutable(index);
}
inline void FileHeader::set_ivs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:sotcore.FileHeader.ivs)
  ivs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FileHeader::set_ivs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:sotcore.FileHeader.ivs)
  ivs_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FileHeader::set_ivs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ivs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sotcore.FileHeader.ivs)
}
inline void FileHeader::set_ivs(int index, const void* value, size_t size) {
  ivs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sotcore.FileHeader.ivs)
}
inline ::std::string* FileHeader::add_ivs() {
  // @@protoc_insertion_point(field_add_mutable:sotcore.FileHeader.ivs)
  return ivs_.Add();
}
inline void FileHeader::add_ivs(const ::std::string& value) {
  ivs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sotcore.FileHeader.ivs)
}
#if LANG_CXX11
inline void FileHeader::add_ivs(::std::string&& value) {
  ivs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sotcore.FileHeader.ivs)
}
#endif
inline void FileHeader::add_ivs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ivs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sotcore.FileHeader.ivs)
}
inline void FileHeader::add_ivs(const void* value, size_t size) {
  ivs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sotcore.FileHeader.ivs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FileHeader::ivs() const {
  // @@protoc_insertion_point(field_list:sotcore.FileHeader.ivs)
  return ivs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FileHeader::mutable_ivs() {
  // @@protoc_insertion_point(field_mutable_list:sotcore.FileHeader.ivs)
  return &ivs_;
}

// bytes checksum = 5;
inline void FileHeader::clear_checksum() {
  checksum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileHeader::checksum() const {
  // @@protoc_insertion_point(field_get:sotcore.FileHeader.checksum)
  return checksum_.GetNoArena();
}
inline void FileHeader::set_checksum(const ::std::string& value) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sotcore.FileHeader.checksum)
}
#if LANG_CXX11
inline void FileHeader::set_checksum(::std::string&& value) {
  
  checksum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sotcore.FileHeader.checksum)
}
#endif
inline void FileHeader::set_checksum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sotcore.FileHeader.checksum)
}
inline void FileHeader::set_checksum(const void* value, size_t size) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sotcore.FileHeader.checksum)
}
inline ::std::string* FileHeader::mutable_checksum() {
  
  // @@protoc_insertion_point(field_mutable:sotcore.FileHeader.checksum)
  return checksum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileHeader::release_checksum() {
  // @@protoc_insertion_point(field_release:sotcore.FileHeader.checksum)
  
  return checksum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileHeader::set_allocated_checksum(::std::string* checksum) {
  if (checksum != NULL) {
    
  } else {
    
  }
  checksum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checksum);
  // @@protoc_insertion_point(field_set_allocated:sotcore.FileHeader.checksum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sotcore

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sotcore::CompressionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sotcore::CompressionType>() {
  return ::sotcore::CompressionType_descriptor();
}
template <> struct is_proto_enum< ::sotcore::Cipher> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sotcore::Cipher>() {
  return ::sotcore::Cipher_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FileHeader_2eproto__INCLUDED
