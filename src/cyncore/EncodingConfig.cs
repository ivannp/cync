// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: EncodingConfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CloudSync.Core {

  /// <summary>Holder for reflection information generated from EncodingConfig.proto</summary>
  public static partial class EncodingConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for EncodingConfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EncodingConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRFbmNvZGluZ0NvbmZpZy5wcm90bxIHc290Y29yZSJkCg5FbmNvZGluZ0Nv",
            "bmZpZxIZChFjb21wcmVzc2lvbl9sZXZlbBgBIAEoBRIPCgdjaXBoZXJzGAIg",
            "AygJEgsKA2tleRgDIAEoDBILCgNzcmMYBCABKAkSDAoEZGVzdBgFIAEoCUIR",
            "qgIOQ2xvdWRTeW5jLkNvcmViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CloudSync.Core.EncodingConfig), global::CloudSync.Core.EncodingConfig.Parser, new[]{ "CompressionLevel", "Ciphers", "Key", "Src", "Dest" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class EncodingConfig : pb::IMessage<EncodingConfig> {
    private static readonly pb::MessageParser<EncodingConfig> _parser = new pb::MessageParser<EncodingConfig>(() => new EncodingConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EncodingConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CloudSync.Core.EncodingConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncodingConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncodingConfig(EncodingConfig other) : this() {
      compressionLevel_ = other.compressionLevel_;
      ciphers_ = other.ciphers_.Clone();
      key_ = other.key_;
      src_ = other.src_;
      dest_ = other.dest_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncodingConfig Clone() {
      return new EncodingConfig(this);
    }

    /// <summary>Field number for the "compression_level" field.</summary>
    public const int CompressionLevelFieldNumber = 1;
    private int compressionLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompressionLevel {
      get { return compressionLevel_; }
      set {
        compressionLevel_ = value;
      }
    }

    /// <summary>Field number for the "ciphers" field.</summary>
    public const int CiphersFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_ciphers_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> ciphers_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Ciphers {
      get { return ciphers_; }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private pb::ByteString key_ = pb::ByteString.Empty;
    /// <summary>
    /// All keys are passed as a single array
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "src" field.</summary>
    public const int SrcFieldNumber = 4;
    private string src_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Src {
      get { return src_; }
      set {
        src_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dest" field.</summary>
    public const int DestFieldNumber = 5;
    private string dest_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dest {
      get { return dest_; }
      set {
        dest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EncodingConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EncodingConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompressionLevel != other.CompressionLevel) return false;
      if(!ciphers_.Equals(other.ciphers_)) return false;
      if (Key != other.Key) return false;
      if (Src != other.Src) return false;
      if (Dest != other.Dest) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CompressionLevel != 0) hash ^= CompressionLevel.GetHashCode();
      hash ^= ciphers_.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Src.Length != 0) hash ^= Src.GetHashCode();
      if (Dest.Length != 0) hash ^= Dest.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CompressionLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CompressionLevel);
      }
      ciphers_.WriteTo(output, _repeated_ciphers_codec);
      if (Key.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Key);
      }
      if (Src.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Src);
      }
      if (Dest.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Dest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompressionLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompressionLevel);
      }
      size += ciphers_.CalculateSize(_repeated_ciphers_codec);
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (Src.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Src);
      }
      if (Dest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EncodingConfig other) {
      if (other == null) {
        return;
      }
      if (other.CompressionLevel != 0) {
        CompressionLevel = other.CompressionLevel;
      }
      ciphers_.Add(other.ciphers_);
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Src.Length != 0) {
        Src = other.Src;
      }
      if (other.Dest.Length != 0) {
        Dest = other.Dest;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CompressionLevel = input.ReadInt32();
            break;
          }
          case 18: {
            ciphers_.AddEntriesFrom(input, _repeated_ciphers_codec);
            break;
          }
          case 26: {
            Key = input.ReadBytes();
            break;
          }
          case 34: {
            Src = input.ReadString();
            break;
          }
          case 42: {
            Dest = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
